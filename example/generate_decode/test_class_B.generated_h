public:
json encode() const
{
	json result = json::array();

	//begin base encode
	result.push_back(meta::serialize::encode(static_cast<const test::test_class&>(*this)));

	//begin encode_fields encode
	result.push_back(meta::serialize::encode(d));
	return result;
}
private:
public:
bool decode(const json& data)
{
	if(!data.is_array())
	{
		return false;
	}
	std::size_t total_size = data.size();
	std::size_t index = 0;
	//begin base decode

	if(index >= total_size)
	{
		return false;
	}
	if(!meta::serialize::decode(data[index], static_cast<test::test_class&>(*this)))
	{
		return false;
	}
	index++;

	//begin field decode

	if(index >= total_size)
	{
		return false;
	}
	if(!meta::serialize::decode(data[index], d))
	{
		return false;
	}
	index++;
	return true;
}
private:
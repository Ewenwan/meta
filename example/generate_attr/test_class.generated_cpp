

std::unordered_map<std::string, std::pair<test::test_class::func_type, std:vector<int>>> test::test_class::attr_func_map;
void test::test_class::init_attr_func_map()
{
    auto& cur_type_map = meta::utils::type_map<std::string>();
    auto interface_1_arg_require = meta::utils::func_arg_type_ids<std::string, meta::utils::function_arguments<decltype(&test_class::interface_1)>::type>::result();
    attr_func_map["interface_1] = std::make_pair(&test_class::attr_func_for_interface_1, interface_1_arg_require);
    auto interface_2_arg_require = meta::utils::func_arg_type_ids<std::string, meta::utils::function_arguments<decltype(&test_class::interface_2)>::type>::result();
    attr_func_map["interface_2] = std::make_pair(&test_class::attr_func_for_interface_2, interface_2_arg_require);
    auto interface_3_arg_require = meta::utils::func_arg_type_ids<std::string, meta::utils::function_arguments<decltype(&test_class::interface_3)>::type>::result();
    attr_func_map["interface_3] = std::make_pair(&test_class::attr_func_for_interface_3, interface_3_arg_require);

    cur_type_map.register_type<int>("int");
    cur_type_map.register_type<const int>("const int");
    cur_type_map.register_type<int &>("int &");
    cur_type_map.register_type<const int &>("const int &");
    cur_type_map.register_type<std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;>("std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;");
    cur_type_map.register_type<const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;>("const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;");
    cur_type_map.register_type<std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &>("std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &");
    cur_type_map.register_type<const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &>("const std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &");
    cur_type_map.register_type<std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;>("std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;");
    cur_type_map.register_type<const std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;>("const std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;");
    cur_type_map.register_type<std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; &>("std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; &");
    cur_type_map.register_type<const std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; &>("const std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; &");
}

void test::test_class::attr_func_for_interface_1(const std::vector<const void*>& data)
{
    auto p_a = reinterpret_cast<const int*>(data[0]);
    
    auto p_b = reinterpret_cast<const std::basic_string<char,std::char_traits<char>,std::allocator<char>>*>(data[1]);
    
    interface_1(*p_a,*p_b);
}
void test::test_class::attr_func_for_interface_2(const std::vector<const void*>& data)
{
	
    interface_2();
}
void test::test_class::attr_func_for_interface_3(const std::vector<const void*>& data)
{
    
    auto p_s = const_cast<const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &*>(reinterpret_cast<const const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &*>(data[0]));
    interface_3(*p_s);
}

bool test::test_class::has_attr_func(const std::string& func_name)
{
    auto cur_iter = attr_func_map.find(func_name);
    if(cur_iter == attr_func_map.end())
    {
        return false;
    }
    else
    {
        return true;
    }
}
template <typename... Args>
bool test::test_class::has_attr_func_with_args(const std::string& func_name)
{
    auto& cur_type_map = meta::utils::type_map<std::string>();
    auto cur_iter = attr_func_map.find(func_name);
    if(cur_iter == attr_func_map.end())
    {
        return false;
    }
    else
    {
        const auto& cur_func_require = cur_iter->second.second;
        return cur_type_map.can_convert_to<Args...>(cur_func_require);
    }
}
template <typename... Args>
bool test::test_class::call_attr_func(const std::string& func_name, const Args&... args)
{
    auto& cur_type_map = meta::utils::type_map<std::string>();
    auto cur_iter = attr_func_map.find(func_name);
    if(cur_iter == attr_func_map.end())
    {
        return false;
    }
    else
    {
        const auto& cur_func_require = cur_iter->second.second;
        auto cur_func_ptr = cur_iter->second.first;
        if(!cur_type_map.can_convert_to<Args...>(cur_func_require))
        {
            return false;
        }
        std::vector<const void*> arg_pointers;
        arg_pointers.push_back(reinterpret_cast<const void*>(std::addressof(args))),...);
		(this->*cur_func_ptr)(arg_pointers);
        return true;
    }
}

// this file should be end of generated cpp file
test::test_class::static_constructor_for_test_class test::test_class::_static_constructor_;
test::test_class::static_constructor_for_test_class::static_constructor_for_test_class()
{
	init_attr_func_map();
}
public:
bool replay_mutate_msg(std::size_t field_index, meta::utils::var_mutate_cmd cmd, const json& data)
{
    {{#base_class}}
    if(static_cast<std::uint16_t>(field_index) < {{base_idx}})
    {
        return {{base_type}}::replay_mutate_msg(field_index, cmd, data);
    }
    switch(field_index)
    {
    {{#fields}}
    case index_for_{{field_name}}:
    {
        auto temp_proxy = {{field_name}}_mut();
        return temp_proxy.replay(cmd, data);
    }
    {{/fields}}
    default:
        return false;
    }
}

private:
{{#fields}}
const static var_idx_type index_for_{{field_name}} = {{field_idx}};
{{/fields}}
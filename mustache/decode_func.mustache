public:
bool decode(const json& data)
{
	if(!data.is_array())
	{
		return false;
	}
	std::size_t total_size = data.size();
	std::size_t index = 0;
	//begin base decode

	{{#bases}}
	if(index >= total_size)
	{
		return false;
	}
	if(!meta::serialize::decode(data[index], static_cast<{{base_type}}&>(*this)))
	{
		return false;
	}
	index++;
	{{/bases}}

	//begin field decode

	{{#encode_fields}}
	if(index >= total_size)
	{
		return false;
	}
	if(!meta::serialize::decode(data[index], {{field_name}}))
	{
		return false;
	}
	index++;
	{{/encode_fields}}
	return true;
}
private:
class {{class_name}}_helper
{
public:
	static std::optional<{{class_name}}> from_string(const std::string& val)
	{
		static std::unordered_map<std::string, {{class_name}}> enum_map = {
			{{#enum_items}}
			{ "{{enum_name}}", {{class_name}}::{{enum_name}} }{{^last_item}},{{/last_item}}
			{{/enum_items}}
		};
		auto cur_iter = enum_map.find(val);
		if(cur_iter == enum_map.end())
		{
			return {};
		}
		else
		{
			return cur_iter->second;
		}
	}
	static std::string to_string({{class_name}} val)
	{
		switch(val)
		{
		{{#enum_items}}
		case {{class_name}}::{{enum_name}}:
			return "{{enum_name}}";
		{{/enum_items}}
		default:
			return "invalid_enum_{{class_name}}_with_value_" + std::to_string(int(val));
		}
	}
};
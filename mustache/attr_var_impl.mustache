
static std::unordered_map<std::string, std::pair<attr_var_type, int>> {{class_full_name}}::attr_var_map;
void {{class_full_name}}::init_attr_var_map()
{
	auto& cur_type_map = meta::utils::type_map<std::string>();
	{{#attr_vars}}

	attr_var_map["{{var_name}}] = std::make_pair({{var_idx}}, cur_type_map.get_type_id<decltype({{class_name}}::{{var_name}}));
	{{/attr_vars}}
}

public:
static bool {{class_full_name}}::has_attr_var(const std::string& var_name)
{
	auto cur_iter = attr_var_map.find(var_name);
	if(cur_iter == attr_var_map.end())
	{
		return false;
	}
	else
	{
		return true;
	}
}

std::pair<void*, int> {{class_full_name}}::var_address_for_name(const std::string& var_name)
{
	auto cur_iter = attr_var_map.find(var_name);
	if (cur_iter == attr_var_map.end())
	{
		return std::make_pair(nullptr, 0);
	}
	auto cur_type_idx = cur_iter->second.second;
	auto cur_var_idx = cur_iter->second.first;

	switch (cur_var_idx)
	{
	{{#attr_vars}}
	case {{var_idx}}:
	{
		void* p = const_cast<void*>(reinterpret_cast<const void*>(&{{var_name}}));
		return std::make_pair(p, cur_type_idx);
	}
	{{/attr_vars}}
	default:
		return std::make_pair(nullptr, 0);
	}
}
